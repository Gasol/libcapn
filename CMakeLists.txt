CMAKE_MINIMUM_REQUIRED (VERSION 2.8.5)
SET(CAPN_LIB_NAME "capn")
PROJECT("libcapn" C)

OPTION (BUILD_SHARED_LIBS "Build shared libraries." ON)

SET(CMAKE_VERBOSE_MAKEFILE OFF)

SET(CAPN_VERSION_MAJOR 2)
SET(CAPN_VERSION_MINOR 0)
SET(CAPN_VERSION_PATCH 0)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

INCLUDE (CheckFunctionExists)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckTypeSize)

SET(CAPN_VERSION "${CAPN_VERSION_MAJOR}.${CAPN_VERSION_MINOR}.${CAPN_VERSION_PATCH}")
SET(PROJECT_VERSION ${CAPN_VERSION})

IF(NOT DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

IF("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_C_FLAGS "-std=c99 -D_POSIX_C_SOURCE=200112L -Wno-deprecated -Wall -Wextra -Wimplicit -fPIC -W -Wformat-security -pedantic")
    SET(CMAKE_C_FLAGS_DEBUGE "-g3 -O0 -DDEBUG")
    SET(CMAKE_C_FLAGS_RELEASE "-g2 -O3")
ENDIF()

SET(APN_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
SET(APN_SOURCE_LIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/library")
SET(APN_THIRD_PARTY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/third_party")

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")

INCLUDE_DIRECTORIES (${APN_SOURCE_LIB_DIR})
INCLUDE_DIRECTORIES (${PROJECT_BINARY_DIR})
INCLUDE_DIRECTORIES (${PROJECT_BINARY_DIR}/src/library)

CHECK_INCLUDE_FILES (ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILES (netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILES (sys/fcntl.h HAVE_SYS_FCNTL_H)

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CAPN_ARCH_STR "x86_64")
    SET(CAPN_ARCH_X86_64 TRUE)
ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CAPN_ARCH_STR "x86")
    SET(CAPN_ARCH_X86_64 FALSE)
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(OS_LINUX TRUE)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

CHECK_FUNCTION_EXISTS (strerror_r HAVE_STRERROR_R)

MACRO(APN_TEST_STRERROR_R HEADER)
    MESSAGE(STATUS "Performing test ${HEADER}")
    TRY_RUN(${HEADER} ${HEADER}_res ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/cmake/tests/strerror_r.c
	    CMAKE_FLAGS -DCOMPILE_DEFINITIONS:STRING=-D${HEADER}
	    OUTPUT_VARIABLE OUTPUT
    )
    IF(${HEADER}_res AND NOT ${HEADER})
	    SET(${HEADER} 1 CACHE INTERNAL "test ${HEADER}")
	    MESSAGE(STATUS "Performing test ${HEADER} - Success")
    ELSE()
	    SET(${HEADER} "" CACHE INTERNAL "test ${HEADER}")
	    MESSAGE(STATUS "Performing test ${HEADER} - Failed")
    ENDIF()
ENDMACRO()

FOREACH(STRERROR_R_HEADER
    HAVE_GLIBC_STRERROR_R
    HAVE_POSIX_STRERROR_R
)
APN_TEST_STRERROR_R(${STRERROR_R_HEADER})
ENDFOREACH(STRERROR_R_HEADER)

INCLUDE(ExternalProject)

ExternalProject_Add(
    jansson
    SOURCE_DIR "${APN_THIRD_PARTY_DIR}/jansson"
    BINARY_DIR "${APN_THIRD_PARTY_DIR}/jansson"
    INSTALL_DIR "${APN_THIRD_PARTY_DIR}/jansson"
    CMAKE_COMMAND cmake . -DCFLAGS=-fPIC
    BUILD_COMMAND make
    INSTALL_COMMAND ""
)

INCLUDE_DIRECTORIES ("${APN_THIRD_PARTY_DIR}/jansson")
INCLUDE_DIRECTORIES ("${APN_THIRD_PARTY_DIR}/jansson/include")

CONFIGURE_FILE("${APN_SOURCE_LIB_DIR}/apn_platform.h.cmake" "${PROJECT_BINARY_DIR}/src/library/apn_platform.h")
CONFIGURE_FILE("${APN_SOURCE_LIB_DIR}/apn_version.h.cmake" "${PROJECT_BINARY_DIR}/src/library/apn_version.h")

IF(UNIX)
    INCLUDE (FindOpenSSL)
    IF(NOT OPENSSL_FOUND)
	    MESSAGE(FATAL_ERROR "openssl is not found!")
    ENDIF()
    INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIRS})
    
    IF(NOT DEFINED CMAKE_INSTALL_PREFIX)
	    SET(CMAKE_INSTALL_PREFIX "/usr")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_LIB)
	    SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_INCLUDES)
	    SET(CAPN_INSTALL_PATH_INCLUDES "${CMAKE_INSTALL_PREFIX}/include/${CAPN_LIB_NAME}"  CACHE PATH "")
    ENDIF()    

    IF(NOT DEFINED CAPN_INSTALL_PATH_LIB)
	    SET(CAPN_INSTALL_PATH_BIN "${CMAKE_INSTALL_PREFIX}/bin"  CACHE PATH "")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_PKGCONFIG)
	    SET(CAPN_INSTALL_PATH_PKGCONFIG "${CMAKE_INSTALL_PREFIX}/share/pkgconfig"  CACHE PATH "")
    ENDIF()

    IF(LIB_SUFFIX)
        SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}")
    ELSE()
        IF(CAPN_ARCH_X86_64 AND OS_LINUX)
            IF(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64" AND IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib64")
                SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib64")
            ENDIF()
        ENDIF()
    ENDIF()
    
    SET(CAPN_INSTALL_PATH_LIB "${CAPN_INSTALL_PATH_LIB}/${CAPN_LIB_NAME}")
    SET(CAPN_PKGCONF_FILE_NAME "libcapn.pc")
    CONFIGURE_FILE("${CAPN_PKGCONF_FILE_NAME}.cmake" ${PROJECT_BINARY_DIR}/${CAPN_PKGCONF_FILE_NAME})
    INSTALL(FILES ${PROJECT_BINARY_DIR}/${CAPN_PKGCONF_FILE_NAME} DESTINATION ${CAPN_INSTALL_PATH_PKGCONFIG})

    IF(DEFINED OS_LINUX)
        IF(NOT DEFINED CAPN_INSTALL_PATH_SYSCONFIG)
    	    SET(CAPN_INSTALL_PATH_SYSCONFIG "/etc"  CACHE PATH "")
        ENDIF()
        IF(EXISTS "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d" AND IS_DIRECTORY "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d")
            SET(CAPN_LDCONF_FILE_NAME "libcapn-${CAPN_VERSION}-${CAPN_ARCH_STR}.conf")
            CONFIGURE_FILE(libcapn.ld.conf.cmake ${PROJECT_BINARY_DIR}/${CAPN_LDCONF_FILE_NAME})
            INSTALL(FILES ${PROJECT_BINARY_DIR}/${CAPN_LDCONF_FILE_NAME} DESTINATION "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d")
        ENDIF()
    ENDIF()
ENDIF(UNIX)

SET(CAPN_SOURCE_FILES
    ${APN_SOURCE_LIB_DIR}/apn_memory.c
    ${APN_SOURCE_LIB_DIR}/apn.c
    ${APN_SOURCE_LIB_DIR}/apn_strings.c
    ${APN_SOURCE_LIB_DIR}/apn_payload.c
    ${APN_SOURCE_LIB_DIR}/apn_tokens.c
)

SET(CAPN_PUBLIC_HEADER_FILES
    ${APN_SOURCE_LIB_DIR}/apn.h
    ${APN_SOURCE_LIB_DIR}/apn_payload.h
    ${PROJECT_BINARY_DIR}/src/library/apn_platform.h
    ${PROJECT_BINARY_DIR}/src/library/apn_version.h
)

IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(${CAPN_LIB_NAME} SHARED ${CAPN_SOURCE_FILES})
ELSE()
    ADD_LIBRARY(${CAPN_LIB_NAME} STATIC ${CAPN_SOURCE_FILES})
ENDIF()

TARGET_LINK_LIBRARIES(${CAPN_LIB_NAME} ${OPENSSL_LIBRARIES})

IF(DEFINED WIN32)
    TARGET_LINK_LIBRARIES(${CAPN_LIB_NAME} Ws2_32.lib)
ENDIF()

SET_TARGET_PROPERTIES(${CAPN_LIB_NAME} PROPERTIES
    VERSION ${CAPN_VERSION} SOVERSION ${CAPN_VERSION_MAJOR}
    CLEAN_DIRECT_OUTPUT 1	# for cmake 2.6.x and lower
)
ADD_DEPENDENCIES(${CAPN_LIB_NAME} jansson)
TARGET_LINK_LIBRARIES(${CAPN_LIB_NAME} "${APN_THIRD_PARTY_DIR}/jansson/lib/libjansson.a")

INSTALL(TARGETS ${CAPN_LIB_NAME}
         RUNTIME DESTINATION ${CAPN_INSTALL_PATH_BIN}
         LIBRARY DESTINATION ${CAPN_INSTALL_PATH_LIB}
         ARCHIVE DESTINATION ${CAPN_INSTALL_PATH_LIB}
)

INSTALL(FILES ${CAPN_PUBLIC_HEADER_FILES} DESTINATION ${CAPN_INSTALL_PATH_INCLUDES})
